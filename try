class User < ActiveRecord::Base
  attr_accessor :password
  has_many :downloads
  has_many :deals, :through => :downloads
  has_many :coupons, :through => :downloads
  has_many :offers, :through => :downloads
  has_many :influences
  before_save :encrypt_password  

  validates_confirmation_of :password
  validates_presence_of :password, :on => :create
  validates_presence_of :email, :on => :create
  validates_uniqueness_of :email

  def self.generate_coupon
    user_coupon_code = nil
    while user_coupon_code == nil
      potential_coupon = Coupon.where("times_allowed > ?", 0).order("random()").limit(1).first
      times_downloaded = Download.where("coupon_id = ?", potential_coupon.id).count
      if potential_coupon.times_allowed > times_downloaded
        user_coupon_code = potential_coupon.id
      end
    end
    user_coupon_code
  end

  def self.authenticate (email, password)
    user = find_by_email(email)
    if user && user.password_hash == BCrypt::Engine.hash_secret(password, user.password_salt)
      user
    else
      nil
    end
  end

  def self.timesdownloaded (deal_id)

  end

  def encrypt_password
    if password.present?
      self.password_salt = BCrypt::Engine.generate_salt
      self.password_hash = BCrypt::Engine.hash_secret(password, password_salt)
    end
  end
end
